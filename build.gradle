/*
 * Copyright 2022 Peter Kenji Yamanaka
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Top-level build file where you can add configuration options common to all sub-projects/modules.

buildscript {
    ext {
        // SDK
        minSdk = 22
        maxSdk = 33

        // Us (pyamsoft libraries)
        // -SNAPSHOT versions are not published yet and must be built locally
        cachify = "0.2.0"
        highlander = "0.2.0"

        // Kotlin
        kotlin_version = '1.8.0'

        // Compose
        compose_version = "1.3.3"
        compose_compiler_version = "1.4.0"
        composeActivity = "1.6.1"
        composeMaterial = "1.3.1"
        accompanist = "0.28.0"
        coil = "2.2.2"

        // Kotlin
        coroutines = '1.6.4'

        // AndroidX
        annotation = "1.5.0"
        core = "1.9.0"
        lifecycle = "2.5.1"
        fragment = "1.5.5"
        startup = "1.1.1"
        appCompat = "1.6.0"

        // Material Design
        materialDesign = "1.7.0"

        // Google Play libraries
        appUpdate = "2.0.1"
        review = "2.0.1"
        billing = "5.1.0"

        // Needed just for androidx.preference.PreferenceManager
        // Eventually, big G may push for DataStore being a requirement, which will be pain
        // This pulls in all the UI bits too, which is a little lame.
        preference = "1.2.0"
    }
}

plugins {
    // Android AGP
    // https://developer.android.com/studio/build#top-level
    id 'com.android.library' version '7.4.0' apply false

    // Fix Android build cache
    // https://github.com/gradle/android-cache-fix-gradle-plugin
    id "org.gradle.android.cache-fix" version "2.6.2" apply false

    // Kotlin
    // https://developer.android.com/studio/build#top-level
    id 'org.jetbrains.kotlin.android' version "$kotlin_version" apply false

    // Dokka
    // https://github.com/Kotlin/dokka
    id 'org.jetbrains.dokka' version "1.7.20" apply false

    // Gradle version checker
    // https://github.com/ben-manes/gradle-versions-plugin
    id 'com.github.ben-manes.versions' version '0.44.0' apply false

    // Spotless
    // https://github.com/diffplug/spotless
    id "com.diffplug.spotless" version "6.13.0" apply false

    // Validate the public API
    // https://github.com/Kotlin/binary-compatibility-validator
    id 'org.jetbrains.kotlinx.binary-compatibility-validator' version '0.12.1'
}

subprojects {
    // Android AGP
    apply plugin: 'com.android.library'

    // AGP Cache fix
    apply plugin: "org.gradle.android.cache-fix"

    // Kotlin
    apply plugin: 'kotlin-android'
    apply plugin: 'kotlin-kapt'

    // Dokka
    apply plugin: 'org.jetbrains.dokka'

    // Publish
    apply plugin: 'maven-publish'

    final POM_GROUP = "com.github.pyamsoft.pydroid"
    final POM_VERSION = "26.2.1-SNAPSHOT"

    // Kapt flags
    kapt {
        correctErrorTypes = true
        useBuildCache = true
        mapDiagnosticLocations = true

        javacOptions {
            option("-Xlint:unchecked")
            option("-Xlint:deprecation")
            option("-Xmaxerrs", 10000)
        }
    }

    android {
        compileSdkVersion rootProject.ext.maxSdk

        //noinspection GroovyMissingReturnStatement
        defaultConfig {
            minSdkVersion rootProject.ext.minSdk

            // For vector drawables
            vectorDrawables.useSupportLibrary = true

            // Consumer proguard file
            consumerProguardFiles "consumer-rules.pro"

            // Only English, I don't have any translations
            resConfigs "en"

            compileOptions {
                sourceCompatibility JavaVersion.VERSION_11
                targetCompatibility JavaVersion.VERSION_11
            }

            kotlinOptions {
                jvmTarget = "11"
            }

            publishing {
                singleVariant("release") {
                    // Do not include withSources and withJavadoc here because we will
                    // add them with our own custom hooks below
                }
            }
        }

        buildTypes {
            debug {
                minifyEnabled false
                shrinkResources false
            }

            release {
                minifyEnabled false
                shrinkResources false
            }
        }

        buildFeatures {
            buildConfig false
        }
    }

    project.afterEvaluate {
        task androidSourcesJar(type: Jar) {
            archiveClassifier.convention('sources')
            archiveClassifier.set('sources')
            from android.sourceSets.main.java.source
        }

        task androidJavadocsJar(type: Jar, dependsOn: dokkaJavadoc) {
            archiveClassifier.convention('javadoc')
            archiveClassifier.set('javadoc')
            from "$buildDir/dokka"
        }

        artifacts {
            archives androidSourcesJar
            archives androidJavadocsJar
        }

        publishing {
            publications {
                PYDroid(MavenPublication) {
                    artifact androidSourcesJar
                    artifact androidJavadocsJar
                    from project.components.release

                    artifactId project.name
                    groupId POM_GROUP
                    version POM_VERSION
                }
            }
        }
    }
}

allprojects {
    apply plugin: "com.diffplug.spotless"
    apply plugin: 'com.github.ben-manes.versions'

    repositories {
        mavenLocal()
        gradlePluginPortal()
        google()
        mavenCentral()

        // Jitpack
        maven {
            url 'https://jitpack.io'
            content {
                includeGroup("com.github.pyamsoft")
            }
        }
    }

    // Java compile show
    tasks.withType(JavaCompile) {
        options.compilerArgs << '-Xlint:unchecked' << '-Xlint:deprecation'
        options.deprecation = true
    }

    // Version Plugin ignore non-stable releases
    def isNonStable = { version ->
        def stableKeyword = ['RELEASE', 'FINAL', 'GA'].any { version.toUpperCase().contains(it) }
        def regex = /^[0-9,.v-]+(-r)?$/
        return !stableKeyword && !(version ==~ regex)
    }
    tasks.named("dependencyUpdates").configure {
        rejectVersionIf {
            isNonStable(it.candidate.version)
        }
    }

    // Spotless plugin
    spotless {
        java {
            target "src/**/*.java"

            removeUnusedImports()
            trimTrailingWhitespace()
            endWithNewline()
            indentWithSpaces(2)
        }
        kotlin {
            target "src/**/*.kt"
            ktfmt()

            trimTrailingWhitespace()
            endWithNewline()
            indentWithSpaces(2)
        }
        groovyGradle {
            target "*.gradle"
            greclipse()

            trimTrailingWhitespace()
            endWithNewline()
            indentWithSpaces(2)
        }
    }
}
